// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RhythmFlow.Framework.src.Data;

#nullable disable

namespace RhythmFlow.Framework.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241123165046_UserRequiredName")]
    partial class UserRequiredName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uuid")
                        .HasColumnName("projects_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("ProjectsId", "UsersId")
                        .HasName("pk_project_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_project_user_users_id");

                    b.ToTable("project_user", (string)null);
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.ToTable("projects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2450d826-d0c6-44d4-8b58-4de409f970f8"),
                            Description = "Conquer the Galaxy",
                            EndDate = new DateOnly(2025, 1, 12),
                            Name = "Alpha",
                            StartDate = new DateOnly(2024, 11, 25),
                            Status = "InProgress",
                            WorkspaceId = new Guid("54e9be49-a79b-4571-b553-d99c95be49c6")
                        },
                        new
                        {
                            Id = new Guid("088b7b9c-9d4b-4223-acca-4aca8c70b56a"),
                            Description = "Develop AI Assistant",
                            EndDate = new DateOnly(2025, 1, 22),
                            Name = "Beta",
                            StartDate = new DateOnly(2024, 11, 28),
                            Status = "NotStarted",
                            WorkspaceId = new Guid("9b021d86-f6db-45cf-a099-d610c0a2489b")
                        },
                        new
                        {
                            Id = new Guid("c2c844ff-3afe-4e7d-97af-b0d6c386b81a"),
                            Description = "Revamp Website Design",
                            EndDate = new DateOnly(2025, 1, 7),
                            Name = "Gamma",
                            StartDate = new DateOnly(2024, 11, 26),
                            Status = "InProgress",
                            WorkspaceId = new Guid("08e850d1-386d-4a80-941e-55c70265f689")
                        },
                        new
                        {
                            Id = new Guid("24ef3292-7217-4ddb-9946-28e64e9b224c"),
                            Description = "Launch Mobile App",
                            EndDate = new DateOnly(2025, 2, 21),
                            Name = "Delta",
                            StartDate = new DateOnly(2024, 11, 30),
                            Status = "InProgress",
                            WorkspaceId = new Guid("6f89a60a-2b90-46e0-8a12-b803d5de3253")
                        },
                        new
                        {
                            Id = new Guid("47da68e6-19e1-4a2c-8624-7d48b8b243b7"),
                            Description = "Implement Cloud Migration",
                            EndDate = new DateOnly(2025, 3, 23),
                            Name = "Epsilon",
                            StartDate = new DateOnly(2024, 11, 24),
                            Status = "Cancelled",
                            WorkspaceId = new Guid("9ba7f963-f652-4de4-a6b1-a2b7544efc83")
                        },
                        new
                        {
                            Id = new Guid("a9ad74a2-2122-433f-9484-8039ad7c8906"),
                            Description = "Optimize Data Pipeline",
                            EndDate = new DateOnly(2025, 2, 11),
                            Name = "Zeta",
                            StartDate = new DateOnly(2024, 12, 3),
                            Status = "InProgress",
                            WorkspaceId = new Guid("9ba7f963-f652-4de4-a6b1-a2b7544efc83")
                        });
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.ToTable("tickets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cabda972-0a03-4587-9864-e71b6100b7e8"),
                            Deadline = new DateOnly(2024, 11, 30),
                            Description = "using Postgres",
                            Priority = "High",
                            ProjectId = new Guid("2450d826-d0c6-44d4-8b58-4de409f970f8"),
                            Status = "InProgress",
                            Title = "Create Database",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("4b7d9213-44fc-472b-babb-f49bda47acff"),
                            Deadline = new DateOnly(2024, 11, 26),
                            Description = "Resolve authentication error",
                            Priority = "High",
                            ProjectId = new Guid("2450d826-d0c6-44d4-8b58-4de409f970f8"),
                            Status = "InProgress",
                            Title = "Fix Login Issue",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("90d9e678-da9b-4f73-a8e0-c65cd58ce3e8"),
                            Deadline = new DateOnly(2024, 12, 7),
                            Description = "Create wireframe for new landing page",
                            Priority = "Medium",
                            ProjectId = new Guid("2450d826-d0c6-44d4-8b58-4de409f970f8"),
                            Status = "Cancelled",
                            Title = "Design Landing Page",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("3639a560-ff0c-425d-aff0-65bb6d190d2f"),
                            Deadline = new DateOnly(2024, 12, 23),
                            Description = "Review and update policy document",
                            Priority = "Low",
                            ProjectId = new Guid("088b7b9c-9d4b-4223-acca-4aca8c70b56a"),
                            Status = "NotStarted",
                            Title = "Update Privacy Policy",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("06adb4b3-2ba0-4c5a-99a7-be40ea9f8fb5"),
                            Deadline = new DateOnly(2024, 12, 3),
                            Description = "Enhance performance of existing API calls",
                            Priority = "High",
                            ProjectId = new Guid("088b7b9c-9d4b-4223-acca-4aca8c70b56a"),
                            Status = "InProgress",
                            Title = "Optimize API",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("626f5da6-644c-419e-bab0-da02fc62ae58"),
                            Deadline = new DateOnly(2024, 11, 30),
                            Description = "Plan onboarding session for new hires",
                            Priority = "Medium",
                            ProjectId = new Guid("088b7b9c-9d4b-4223-acca-4aca8c70b56a"),
                            Status = "NotStarted",
                            Title = "Schedule Training",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("08e083f0-5ee0-49a5-8501-6bf31f4d832a"),
                            Deadline = new DateOnly(2024, 12, 14),
                            Description = "Implement dark mode toggle for Users",
                            Priority = "High",
                            ProjectId = new Guid("47da68e6-19e1-4a2c-8624-7d48b8b243b7"),
                            Status = "Cancelled",
                            Title = "Add Dark Mode",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("48565efc-68ea-4c78-88b5-b30f99caa645"),
                            Deadline = new DateOnly(2024, 11, 28),
                            Description = "Fix issue with incorrect data rendering",
                            Priority = "High",
                            ProjectId = new Guid("a9ad74a2-2122-433f-9484-8039ad7c8906"),
                            Status = "InProgress",
                            Title = "Bug in Report Generation",
                            Type = 1
                        });
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("95a101f2-b7c6-4d44-a9ab-5b70ebfd09bf"),
                            PasswordHash = "passwordHash"
                        },
                        new
                        {
                            Id = new Guid("77ef7144-30be-4951-abfc-41f96b7b4733"),
                            PasswordHash = "passwordHash123"
                        },
                        new
                        {
                            Id = new Guid("8c8135a1-6d25-4931-b995-0a2ebf4308ed"),
                            PasswordHash = "securePass456"
                        },
                        new
                        {
                            Id = new Guid("3b7e8952-7643-4e8a-a254-6f5a971ebeb1"),
                            PasswordHash = "hashedPassword789"
                        },
                        new
                        {
                            Id = new Guid("4419b211-d1f5-448c-afa0-b52c890301e9"),
                            PasswordHash = "passHash321"
                        },
                        new
                        {
                            Id = new Guid("4b681381-f5be-4ddc-8727-7fd860ce0662"),
                            PasswordHash = "encryptedPass654"
                        },
                        new
                        {
                            Id = new Guid("afd8f599-bcbe-4c3f-8091-446e8eaf2204"),
                            PasswordHash = "hashedPass987"
                        },
                        new
                        {
                            Id = new Guid("6f13b8ec-ff2d-4db4-8815-00705e41ffbf"),
                            PasswordHash = "passwordHash159"
                        },
                        new
                        {
                            Id = new Guid("9f554867-8460-498a-b07b-f81a34b1c548"),
                            PasswordHash = "hashPass753"
                        });
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.UserWorkspace", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("UserId", "WorkspaceId")
                        .HasName("pk_user_workspaces");

                    b.ToTable("user_workspaces", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("95a101f2-b7c6-4d44-a9ab-5b70ebfd09bf"),
                            WorkspaceId = new Guid("54e9be49-a79b-4571-b553-d99c95be49c6"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("77ef7144-30be-4951-abfc-41f96b7b4733"),
                            WorkspaceId = new Guid("9b021d86-f6db-45cf-a099-d610c0a2489b"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("8c8135a1-6d25-4931-b995-0a2ebf4308ed"),
                            WorkspaceId = new Guid("08e850d1-386d-4a80-941e-55c70265f689"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("3b7e8952-7643-4e8a-a254-6f5a971ebeb1"),
                            WorkspaceId = new Guid("54e9be49-a79b-4571-b553-d99c95be49c6"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("9f554867-8460-498a-b07b-f81a34b1c548"),
                            WorkspaceId = new Guid("54e9be49-a79b-4571-b553-d99c95be49c6"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("4b681381-f5be-4ddc-8727-7fd860ce0662"),
                            WorkspaceId = new Guid("9b021d86-f6db-45cf-a099-d610c0a2489b"),
                            Role = 2
                        },
                        new
                        {
                            UserId = new Guid("afd8f599-bcbe-4c3f-8091-446e8eaf2204"),
                            WorkspaceId = new Guid("9b021d86-f6db-45cf-a099-d610c0a2489b"),
                            Role = 2
                        });
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.ToTable("workspaces", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("54e9be49-a79b-4571-b553-d99c95be49c6"),
                            Name = "Marketing",
                            OwnerId = new Guid("95a101f2-b7c6-4d44-a9ab-5b70ebfd09bf")
                        },
                        new
                        {
                            Id = new Guid("9b021d86-f6db-45cf-a099-d610c0a2489b"),
                            Name = "Development",
                            OwnerId = new Guid("77ef7144-30be-4951-abfc-41f96b7b4733")
                        },
                        new
                        {
                            Id = new Guid("08e850d1-386d-4a80-941e-55c70265f689"),
                            Name = "Design",
                            OwnerId = new Guid("8c8135a1-6d25-4931-b995-0a2ebf4308ed")
                        },
                        new
                        {
                            Id = new Guid("6f89a60a-2b90-46e0-8a12-b803d5de3253"),
                            Name = "Sales",
                            OwnerId = new Guid("3b7e8952-7643-4e8a-a254-6f5a971ebeb1")
                        },
                        new
                        {
                            Id = new Guid("9ba7f963-f652-4de4-a6b1-a2b7544efc83"),
                            Name = "HR",
                            OwnerId = new Guid("4419b211-d1f5-448c-afa0-b52c890301e9")
                        });
                });

            modelBuilder.Entity("TicketUser", b =>
                {
                    b.Property<Guid>("TicketsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tickets_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("TicketsId", "UsersId")
                        .HasName("pk_ticket_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_ticket_user_users_id");

                    b.ToTable("ticket_user", (string)null);
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("RhythmFlow.Domain.src.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_user_projects_projects_id");

                    b.HasOne("RhythmFlow.Domain.src.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_user_users_users_id");
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.User", b =>
                {
                    b.OwnsOne("RhythmFlow.Domain.src.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("user_email");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("95a101f2-b7c6-4d44-a9ab-5b70ebfd09bf"),
                                    Value = "john.doe@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("77ef7144-30be-4951-abfc-41f96b7b4733"),
                                    Value = "jane.smith@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("8c8135a1-6d25-4931-b995-0a2ebf4308ed"),
                                    Value = "michael.johnson@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("3b7e8952-7643-4e8a-a254-6f5a971ebeb1"),
                                    Value = "emily.davis@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("4419b211-d1f5-448c-afa0-b52c890301e9"),
                                    Value = "chris.brown@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("4b681381-f5be-4ddc-8727-7fd860ce0662"),
                                    Value = "sophia.wilson@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("afd8f599-bcbe-4c3f-8091-446e8eaf2204"),
                                    Value = "daniel.martinez@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("6f13b8ec-ff2d-4db4-8815-00705e41ffbf"),
                                    Value = "olivia.garcia@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("9f554867-8460-498a-b07b-f81a34b1c548"),
                                    Value = "matthew.anderson@example.com"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("TicketUser", b =>
                {
                    b.HasOne("RhythmFlow.Domain.src.Entities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_user_tickets_tickets_id");

                    b.HasOne("RhythmFlow.Domain.src.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_user_users_users_id");
                });
#pragma warning restore 612, 618
        }
    }
}
