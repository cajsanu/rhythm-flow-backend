// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RhythmFlow.Framework.src.Data;

#nullable disable

namespace RhythmFlow.Framework.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241126092422_UserGetAndSet")]
    partial class UserGetAndSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uuid")
                        .HasColumnName("projects_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("ProjectsId", "UsersId")
                        .HasName("pk_project_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_project_user_users_id");

                    b.ToTable("project_user", (string)null);
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.ToTable("projects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c94986e9-2dbe-47ba-a895-3c6356e0478c"),
                            Description = "Conquer the Galaxy",
                            EndDate = new DateOnly(2025, 1, 15),
                            Name = "Alpha",
                            StartDate = new DateOnly(2024, 11, 28),
                            Status = "InProgress",
                            WorkspaceId = new Guid("e06bf46b-0508-403c-963f-5b4d4287de7e")
                        },
                        new
                        {
                            Id = new Guid("b13be132-27d2-418f-9b6a-6e73b2c2a70d"),
                            Description = "Develop AI Assistant",
                            EndDate = new DateOnly(2025, 1, 25),
                            Name = "Beta",
                            StartDate = new DateOnly(2024, 12, 1),
                            Status = "NotStarted",
                            WorkspaceId = new Guid("f3538842-3d20-482a-be6e-fe8d77b99df2")
                        },
                        new
                        {
                            Id = new Guid("0467476d-6c6f-4cb1-9806-af8dc934d5d8"),
                            Description = "Revamp Website Design",
                            EndDate = new DateOnly(2025, 1, 10),
                            Name = "Gamma",
                            StartDate = new DateOnly(2024, 11, 29),
                            Status = "InProgress",
                            WorkspaceId = new Guid("9e2bbe3e-663b-4d08-bb99-747171f7bd98")
                        },
                        new
                        {
                            Id = new Guid("d3276591-9895-4be9-900f-8f0e97c3a6f1"),
                            Description = "Launch Mobile App",
                            EndDate = new DateOnly(2025, 2, 24),
                            Name = "Delta",
                            StartDate = new DateOnly(2024, 12, 3),
                            Status = "InProgress",
                            WorkspaceId = new Guid("a9a95c77-1951-4dc4-a51a-ecb6f3350ecd")
                        },
                        new
                        {
                            Id = new Guid("f373bf5f-0f57-4272-b6ff-a6a2a90dede7"),
                            Description = "Implement Cloud Migration",
                            EndDate = new DateOnly(2025, 3, 26),
                            Name = "Epsilon",
                            StartDate = new DateOnly(2024, 11, 27),
                            Status = "Cancelled",
                            WorkspaceId = new Guid("3d078d7b-580f-414e-859a-a1fbe67ef928")
                        },
                        new
                        {
                            Id = new Guid("0bc75be7-b64e-42de-9651-0afb28842a76"),
                            Description = "Optimize Data Pipeline",
                            EndDate = new DateOnly(2025, 2, 14),
                            Name = "Zeta",
                            StartDate = new DateOnly(2024, 12, 6),
                            Status = "InProgress",
                            WorkspaceId = new Guid("3d078d7b-580f-414e-859a-a1fbe67ef928")
                        });
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.ToTable("tickets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("25c0c7a1-e853-4745-9a1c-b344e6bb0433"),
                            Deadline = new DateOnly(2024, 12, 3),
                            Description = "using Postgres",
                            Priority = "High",
                            ProjectId = new Guid("c94986e9-2dbe-47ba-a895-3c6356e0478c"),
                            Status = "InProgress",
                            Title = "Create Database",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("db02b124-aa2e-4543-b43d-773cc0c19eb1"),
                            Deadline = new DateOnly(2024, 11, 29),
                            Description = "Resolve authentication error",
                            Priority = "High",
                            ProjectId = new Guid("c94986e9-2dbe-47ba-a895-3c6356e0478c"),
                            Status = "InProgress",
                            Title = "Fix Login Issue",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("8ace22dc-2e7c-43ca-829c-904bbcdba6dd"),
                            Deadline = new DateOnly(2024, 12, 10),
                            Description = "Create wireframe for new landing page",
                            Priority = "Medium",
                            ProjectId = new Guid("c94986e9-2dbe-47ba-a895-3c6356e0478c"),
                            Status = "Cancelled",
                            Title = "Design Landing Page",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("5208d0c1-6e6e-41f5-a59f-3d4ee2239cd8"),
                            Deadline = new DateOnly(2024, 12, 26),
                            Description = "Review and update policy document",
                            Priority = "Low",
                            ProjectId = new Guid("b13be132-27d2-418f-9b6a-6e73b2c2a70d"),
                            Status = "NotStarted",
                            Title = "Update Privacy Policy",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("11a458e5-5b69-4172-94b4-9966801214a8"),
                            Deadline = new DateOnly(2024, 12, 6),
                            Description = "Enhance performance of existing API calls",
                            Priority = "High",
                            ProjectId = new Guid("b13be132-27d2-418f-9b6a-6e73b2c2a70d"),
                            Status = "InProgress",
                            Title = "Optimize API",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("af7f355e-0e22-4475-b2a3-3aa249860ae1"),
                            Deadline = new DateOnly(2024, 12, 3),
                            Description = "Plan onboarding session for new hires",
                            Priority = "Medium",
                            ProjectId = new Guid("b13be132-27d2-418f-9b6a-6e73b2c2a70d"),
                            Status = "NotStarted",
                            Title = "Schedule Training",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("12549c20-3790-4c43-a65f-99c24b71f26d"),
                            Deadline = new DateOnly(2024, 12, 17),
                            Description = "Implement dark mode toggle for Users",
                            Priority = "High",
                            ProjectId = new Guid("f373bf5f-0f57-4272-b6ff-a6a2a90dede7"),
                            Status = "Cancelled",
                            Title = "Add Dark Mode",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("f15c17ba-2a89-4f73-997b-e65e1dc3f3f2"),
                            Deadline = new DateOnly(2024, 12, 1),
                            Description = "Fix issue with incorrect data rendering",
                            Priority = "High",
                            ProjectId = new Guid("0bc75be7-b64e-42de-9651-0afb28842a76"),
                            Status = "InProgress",
                            Title = "Bug in Report Generation",
                            Type = 1
                        });
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5491094c-4ab2-41d9-8018-8fff919897ba"),
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        },
                        new
                        {
                            Id = new Guid("45fa9eea-9f76-48cc-b032-4c7594e48067"),
                            FirstName = "Jane",
                            LastName = "Smith",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        },
                        new
                        {
                            Id = new Guid("634a2a9f-8353-4aac-9de5-ef2141250d54"),
                            FirstName = "Michael",
                            LastName = "Johnson",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        },
                        new
                        {
                            Id = new Guid("900357b9-2f96-4cda-b48e-fe3d34307176"),
                            FirstName = "Emily",
                            LastName = "Davis",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        },
                        new
                        {
                            Id = new Guid("83f43da3-dc36-4ce8-ad49-0673b354e8bb"),
                            FirstName = "Chris",
                            LastName = "Brown",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        },
                        new
                        {
                            Id = new Guid("d18bf358-2ab6-4876-983d-dd6e3a5a6d3c"),
                            FirstName = "Sophia",
                            LastName = "Wilson",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        },
                        new
                        {
                            Id = new Guid("6b376c87-51c6-46fd-91ae-5ee926654eb3"),
                            FirstName = "Daniel",
                            LastName = "Martinez",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        },
                        new
                        {
                            Id = new Guid("db6ffd0c-363e-4340-a4ab-e6e7e4c703e1"),
                            FirstName = "Olivia",
                            LastName = "Garcia",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        },
                        new
                        {
                            Id = new Guid("1099c1a3-a1d5-4825-9730-16c166ada80c"),
                            FirstName = "Matthew",
                            LastName = "Anderson",
                            PasswordHash = "$2a$11$2Nr99X5WZI2jTj1S4KLt9.INl4LRZwejVFdv/XegFA0cA6VhLbVFi"
                        });
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.UserWorkspace", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("UserId", "WorkspaceId")
                        .HasName("pk_user_workspaces");

                    b.ToTable("user_workspaces", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5491094c-4ab2-41d9-8018-8fff919897ba"),
                            WorkspaceId = new Guid("e06bf46b-0508-403c-963f-5b4d4287de7e"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("45fa9eea-9f76-48cc-b032-4c7594e48067"),
                            WorkspaceId = new Guid("f3538842-3d20-482a-be6e-fe8d77b99df2"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("634a2a9f-8353-4aac-9de5-ef2141250d54"),
                            WorkspaceId = new Guid("9e2bbe3e-663b-4d08-bb99-747171f7bd98"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("900357b9-2f96-4cda-b48e-fe3d34307176"),
                            WorkspaceId = new Guid("e06bf46b-0508-403c-963f-5b4d4287de7e"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("1099c1a3-a1d5-4825-9730-16c166ada80c"),
                            WorkspaceId = new Guid("e06bf46b-0508-403c-963f-5b4d4287de7e"),
                            Role = 1
                        },
                        new
                        {
                            UserId = new Guid("d18bf358-2ab6-4876-983d-dd6e3a5a6d3c"),
                            WorkspaceId = new Guid("f3538842-3d20-482a-be6e-fe8d77b99df2"),
                            Role = 2
                        },
                        new
                        {
                            UserId = new Guid("6b376c87-51c6-46fd-91ae-5ee926654eb3"),
                            WorkspaceId = new Guid("f3538842-3d20-482a-be6e-fe8d77b99df2"),
                            Role = 2
                        });
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.ToTable("workspaces", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e06bf46b-0508-403c-963f-5b4d4287de7e"),
                            Name = "Marketing",
                            OwnerId = new Guid("5491094c-4ab2-41d9-8018-8fff919897ba")
                        },
                        new
                        {
                            Id = new Guid("f3538842-3d20-482a-be6e-fe8d77b99df2"),
                            Name = "Development",
                            OwnerId = new Guid("45fa9eea-9f76-48cc-b032-4c7594e48067")
                        },
                        new
                        {
                            Id = new Guid("9e2bbe3e-663b-4d08-bb99-747171f7bd98"),
                            Name = "Design",
                            OwnerId = new Guid("634a2a9f-8353-4aac-9de5-ef2141250d54")
                        },
                        new
                        {
                            Id = new Guid("a9a95c77-1951-4dc4-a51a-ecb6f3350ecd"),
                            Name = "Sales",
                            OwnerId = new Guid("900357b9-2f96-4cda-b48e-fe3d34307176")
                        },
                        new
                        {
                            Id = new Guid("3d078d7b-580f-414e-859a-a1fbe67ef928"),
                            Name = "HR",
                            OwnerId = new Guid("83f43da3-dc36-4ce8-ad49-0673b354e8bb")
                        });
                });

            modelBuilder.Entity("TicketUser", b =>
                {
                    b.Property<Guid>("TicketsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tickets_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("TicketsId", "UsersId")
                        .HasName("pk_ticket_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_ticket_user_users_id");

                    b.ToTable("ticket_user", (string)null);
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("RhythmFlow.Domain.src.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_user_projects_projects_id");

                    b.HasOne("RhythmFlow.Domain.src.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_user_users_users_id");
                });

            modelBuilder.Entity("RhythmFlow.Domain.src.Entities.User", b =>
                {
                    b.OwnsOne("RhythmFlow.Domain.src.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("user_email");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("5491094c-4ab2-41d9-8018-8fff919897ba"),
                                    Value = "john.doe@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("45fa9eea-9f76-48cc-b032-4c7594e48067"),
                                    Value = "jane.smith@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("634a2a9f-8353-4aac-9de5-ef2141250d54"),
                                    Value = "michael.johnson@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("900357b9-2f96-4cda-b48e-fe3d34307176"),
                                    Value = "emily.davis@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("83f43da3-dc36-4ce8-ad49-0673b354e8bb"),
                                    Value = "chris.brown@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("d18bf358-2ab6-4876-983d-dd6e3a5a6d3c"),
                                    Value = "sophia.wilson@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("6b376c87-51c6-46fd-91ae-5ee926654eb3"),
                                    Value = "daniel.martinez@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("db6ffd0c-363e-4340-a4ab-e6e7e4c703e1"),
                                    Value = "olivia.garcia@example.com"
                                },
                                new
                                {
                                    UserId = new Guid("1099c1a3-a1d5-4825-9730-16c166ada80c"),
                                    Value = "matthew.anderson@example.com"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("TicketUser", b =>
                {
                    b.HasOne("RhythmFlow.Domain.src.Entities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_user_tickets_tickets_id");

                    b.HasOne("RhythmFlow.Domain.src.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_user_users_users_id");
                });
#pragma warning restore 612, 618
        }
    }
}
